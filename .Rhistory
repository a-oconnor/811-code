# # a. trt model with feedlot as random
# p0_DR_ran_m1.1<- p0_DR_funct(A = realdat_new$A,
#                              Y = realdat_new$Y,
#                              prob = realdat_new$ps.re,
#                              m0 = realdat_new$M0_M1.1)
# p1_DR_ran_m1.1<- p1_DR_funct(A = realdat_new$A,
#                              Y = realdat_new$Y,
#                              prob = realdat_new$ps.re,
#                              m1 = realdat_new$M1_M1.1)
#
# # b. trt model with feedlot as fixed
# p0_DR_fix_m1.1<- p0_DR_funct(A = realdat_new$A,
#                              Y = realdat_new$Y,
#                              prob = realdat_new$ps.fe,
#                              m0 = realdat_new$M0_M1.1)
# p1_DR_fix_m1.1<- p1_DR_funct(A = realdat_new$A,
#                              Y = realdat_new$Y,
#                              prob = realdat_new$ps.fe,
#                              m1 = realdat_new$M1_M1.1)
#
# # c. ICPW
# p0_DR_CP_m1.1<- p0_DR_funct(A = realdat_new$A,
#                             Y = realdat_new$Y,
#                             prob = realdat_new$predM2.3,
#                             m0 = realdat_new$M0_M1.1)
# p1_DR_CP_m1.1<- p1_DR_funct(A = realdat_new$A,
#                             Y = realdat_new$Y,
#                             prob = realdat_new$predM2.3,
#                             m1 = realdat_new$M1_M1.1)
# #*****
# #*****
# #*****
### causal effect is
# icpw.p0 <- with(realdat_new, mean(Y*(1-A)*icpw))
# icpw.p1 <- with(realdat_new, mean(Y*A*icpw))
#Risks from Exposure IPW  model===============================================================================================
ipw.re.p0 <- with(realdat_new, mean(Y*(1-A)/(1-ps.re)))
ipw.re.p1 <- with(realdat_new, mean(Y*A/ps.re))
ipw.fe.p0 <- with(realdat_new, mean(Y*(1-A)/(1-ps.fe)))
ipw.fe.p1 <- with(realdat_new, mean(Y*A/ps.fe))
#Risks from Univariate Outcome model===============================================================================================
# model based est
realdat_new_sub1 <- realdat_new[realdat_new$A==1,]
realdat_new_sub0 <- realdat_new[realdat_new$A==0,]
direct.p0 <- with(realdat_new_sub0, mean(Y*(1-A)))
direct.p1 <- with(realdat_new_sub1, mean(Y*A))
#Risks from Multivariate  model===============================================================================================
# mean of outcome Model based prediction
M1.1_phat1 <- with(realdat_new_sub1, mean(M1_M1.1))
M1.1_phat0 <- with(realdat_new_sub0, mean(M0_M1.1))
p0_vec <- rbind(ipw.re.p0, ipw.fe.p0,
direct.p0, M1.1_phat0)
p1_vec <- rbind(ipw.re.p1, ipw.fe.p1,
direct.p1, M1.1_phat1)
tau_vec <- p1_vec - p0_vec
OR_vec <- cbind(OR_func(p0 = p0_vec, p1 = p1_vec))
output1 <- round(cbind(p0_vec, p1_vec, tau_vec, OR_vec),digits=6)
rownames(output1) <- c("IPW random", "IPW fixed", "direct/Univariate", "Mbased/Multivariate"
)
output1 <- data.frame(output1)
colnames(output1) <- c("p0", "p1", "p1-p0", "OR")
sink("causal_effect_estimate.txt", append = TRUE)
cat("=================================================\n")
cat("having only feedlot as random/fixed effect \n")
cat("size=", nrow(realdat), "\n")
print(output1)
sink()
# sink("feedlot_only_model_parameter_estimate.txt", append = TRUE)
# cat("=================================================\n")
# cat("Outcome model \n")
# print(summary(M1.1))
# cat("=================================================\n")
# cat("Treatment model random feedlot \n")
# print(summary(M2.1))
# cat("=================================================\n")
# cat("Treatment model fixed feedlot \n")
# print(summary(M2.2))
# cat("=================================================\n")
# cat("conditional model\n")
# print(summary(M2.3))
# sink()
#
# sink("causal_effect_estimate.txt", append = TRUE)
# cat("=================================================\n")
# cat("Only having feedlot as random/fixed effect \n")
# print(output1)
# sink()
subdat_0 <- realdat_new[realdat_new$A==0,]
subdat_1 <- realdat_new[realdat_new$A==1,]
#================================================================================
#
# dim(subdat_0)
# length(subdat_0$icpw[subdat_0$icpw==1])
# length(subdat_0$ps.fe[subdat_0$ps.fe<0.01])
# length(subdat_0$ps.re[subdat_0$ps.re<0.01])
# subdat_0[subdat_0$icpw>50,]
#
# dim(subdat_1)
# length(subdat_1$icpw[subdat_1$icpw==1])
# length(subdat_1$ps.fe[subdat_1$ps.fe>0.99])
# length(subdat_1$ps.re[subdat_1$ps.re>0.99])
# subdat_1[subdat_1$icpw>20,]
#Checking for extreme weights================================================================================
bb1 <- realdat_new %>% group_by(feedlot) %>% summarise(length(unique(A)))
dim(bb1[bb1[,2]!=1,]) # 64 cohorts contain more than 1 level of BVDV induction
temp <- as.matrix(bb1[bb1[,2]==1,][,1])
realdat_new_sub <- subset(realdat_new, feedlot %in% temp)
realdat_new_sub_0 <- realdat_new_sub[realdat_new_sub$A==0,]
realdat_new_sub_1 <- realdat_new_sub[realdat_new_sub$A==1,]
nrow(realdat_new_sub_0)
length(realdat_new_sub_0$icpw[realdat_new_sub_0$icpw==1])
length(realdat_new_sub_0$ps.fe[realdat_new_sub_0$ps.fe<0.01])
length(realdat_new_sub_0$ps.re[realdat_new_sub_0$ps.re<0.01])
nrow(realdat_new_sub_1)
length(realdat_new_sub_1$icpw[realdat_new_sub_1$icpw==1])
length(realdat_new_sub_1$ps.fe[realdat_new_sub_1$ps.fe>0.99])
length(realdat_new_sub_1$ps.re[realdat_new_sub_1$ps.re>0.99])
write.csv(realdat_new, "feedlotONLY_data_with_weight.csv")
realdat <- read.csv("cleaned_dat.csv")
realdat <- realdat[realdat$feedlot!=5,] # all feedlots satisfies the positivity cond
realdat <- realdat[order(realdat$feedlot),]
M1.1 <- glmer(brd50 ~ BVDV_binary + age + weight + mix_final_v1 + BVDV_PI_origin_FINAL_v1 + PV_pre2_final + (1|feedlot),
family = binomial, data=realdat, control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))
### Simulation for inverse probability weighting
#Packages=============================================
rm(list=ls())
library(locfit)
library(lme4)
library(dplyr)
library(xtable)
library(survival)
source("functions.R")
realdat <- read.csv("cleaned_dat.csv")
realdat <- realdat[realdat$feedlot!=5,] # all feedlots satisfies the positivity cond
realdat <- realdat[order(realdat$feedlot),]
M1.1 <- glmer(brd50 ~ BVDV_binary + age + weight + mix_final_v1 + BVDV_PI_origin_FINAL_v1 + PV_pre2_final + (1|feedlot),
family = binomial, data=realdat, control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))
M2.1 <- glmer(BVDV_binary ~ age + weight + mix_final_v1 + BVDV_PI_origin_FINAL_v1 + PV_pre2_final + (1|feedlot),
family = binomial, data=realdat, control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))
ps.re <- predict(M2.1, type="response")
M2.2 <- glm(BVDV_binary ~ age + weight + mix_final_v1 + BVDV_PI_origin_FINAL_v1 + PV_pre2_final + strata(feedlot),
family = binomial, data=realdat)
ps.fe <- M2.2$fitted.values
realdat_new <- data.frame(realdat$AnimalID, realdat$feedlot, realdat$cohort, realdat$brd50, realdat$BVDV_binary, realdat$age,
realdat$weight, realdat$mix_final_v1, realdat$BVDV_PI_origin_FINAL_v1, realdat$PV_pre2_final, ps.re, ps.fe)
colnames(realdat_new) <- c("AnimalID", "feedlot", "cohort", "Y", "A",
"age", "weight", "mix_hist","PIgroup", "PV_vacc", "ps.re",
"ps.fe")
write.csv(realdat_new, "feedlotONLY_data_with_weight.csv")
Xmat2<- model.matrix(M1.1, data=realdat_new)
head(Xmat2)
tail(Xmat2)
Xmat2[,2]<-1
M1Xmat2<- Xmat2
Xmat2[,2]<-0
M0Xmat2<- Xmat2
M1.2 <- glm(Y ~  0 + strata(feedlot), family = binomial, data=realdat_new)
M1_M1.1 <- expit(M1Xmat2%*% fixef(M1.1) + as.vector(model.matrix(M1.2)%*% as.matrix(ranef(M1.1)$`feedlot`))) # BLUP
M0_M1.1 <- expit(M0Xmat2%*% fixef(M1.1) + as.vector(model.matrix(M1.2)%*% as.matrix(ranef(M1.1)$`feedlot`)))
realdat_new <- data.frame(realdat_new, M0_M1.1, M1_M1.1)
ipw.re.p0 <- with(realdat_new, mean(Y*(1-A)/(1-ps.re)))
ipw.re.p1 <- with(realdat_new, mean(Y*A/ps.re))
ipw.fe.p0 <- with(realdat_new, mean(Y*(1-A)/(1-ps.fe)))
ipw.fe.p1 <- with(realdat_new, mean(Y*A/ps.fe))
realdat_new_sub1 <- realdat_new[realdat_new$A==1,]
realdat_new_sub0 <- realdat_new[realdat_new$A==0,]
direct.p0 <- with(realdat_new_sub0, mean(Y*(1-A)))
direct.p1 <- with(realdat_new_sub1, mean(Y*A))
# mean of outcome Model based prediction
M1.1_phat1 <- with(realdat_new_sub1, mean(M1_M1.1))
M1.1_phat0 <- with(realdat_new_sub0, mean(M0_M1.1))
#Create a table ==============================================================================================
p0_vec <- rbind(ipw.re.p0, ipw.fe.p0,
direct.p0, M1.1_phat0)
p1_vec <- rbind(ipw.re.p1, ipw.fe.p1,
direct.p1, M1.1_phat1)
tau_vec <- p1_vec - p0_vec
OR_vec <- cbind(OR_func(p0 = p0_vec, p1 = p1_vec))
output1 <- round(cbind(p0_vec, p1_vec, tau_vec, OR_vec),digits=6)
rownames(output1) <- c("IPW random", "IPW fixed", "direct/Univariate", "Mbased/Multivariate"
)
output1 <- data.frame(output1)
colnames(output1) <- c("p0", "p1", "p1-p0", "OR")
sink("causal_effect_estimate.txt", append = TRUE)
cat("=================================================\n")
cat("having only feedlot as random/fixed effect \n")
cat("size=", nrow(realdat), "\n")
print(output1)
sink()
84050/442371
4000/46
30+14+8+48
100/40
48*40
3*15
3*14
40*3
160/1920
120/1960
180/1960
3/7
7/13
testImplications <- function( covariance.matrix, sample.size ){
library(ggm)
tst <- function(i){ pcor.test( pcor(i,covariance.matrix), length(i)-2, sample.size )$pvalue }
tos <- function(i){ paste(i,collapse=" ") }
implications <- list(c("U","V"),
c("U","Y","V","X","Z"),
c("V","X","U","Z"))
data.frame( implication=unlist(lapply(implications,tos)),
pvalue=unlist( lapply( implications, tst ) ) )
}
testImplications <- function( covariance.matrix, sample.size ){
library(ggm)
tst <- function(i){ pcor.test( pcor(i,covariance.matrix), length(i)-2, sample.size )$pvalue }
tos <- function(i){ paste(i,collapse=" ") }
implications <- list(c("U","V"),
c("U","Y","V","X","Z"),
c("V","X","U","Z"))
data.frame( implication=unlist(lapply(implications,tos)),
pvalue=unlist( lapply( implications, tst ) ) )
}
testImplications <- function( covariance.matrix, sample.size ){
library(ggm)
tst <- function(i){ pcor.test( pcor(i,covariance.matrix), length(i)-2, sample.size )$pvalue }
tos <- function(i){ paste(i,collapse=" ") }
1500*12
365*11*10
20/48
rm(list=ls())
library(locfit)
library(lme4)
library(dplyr)
library(xtable)
library(survival)
source("functions.R")
realdat <- read.csv("cleaned_dat.csv")
realdat <- realdat[realdat$feedlot!=5,] # all feedlots satisfies the positivity cond
realdat <- realdat[order(realdat$feedlot),]
M1.1 <- glmer(brd50 ~ BVDV_binary + age + weight + mix_final_v1 + BVDV_PI_origin_FINAL_v1 + PV_pre2_final + (1|feedlot),
family = binomial, data=realdat, control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))
M2.1 <- glmer(BVDV_binary ~ age + weight + mix_final_v1 + BVDV_PI_origin_FINAL_v1 + PV_pre2_final + (1|feedlot),
family = binomial, data=realdat, control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))
ps.re <- predict(M2.1, type="response")
M2.2 <- glm(BVDV_binary ~ age + weight + mix_final_v1 + BVDV_PI_origin_FINAL_v1 + PV_pre2_final + strata(feedlot),
family = binomial, data=realdat)
ps.fe <- M2.2$fitted.values
realdat_new <- data.frame(realdat$AnimalID, realdat$feedlot, realdat$cohort, realdat$brd50, realdat$BVDV_binary, realdat$age,
realdat$weight, realdat$mix_final_v1, realdat$BVDV_PI_origin_FINAL_v1, realdat$PV_pre2_final, ps.re, ps.fe)
colnames(realdat_new) <- c("AnimalID", "feedlot", "cohort", "Y", "A",
"age", "weight", "mix_hist","PIgroup", "PV_vacc", "ps.re",
"ps.fe")
write.csv(realdat_new, "feedlotONLY_data_with_weight.csv")
# Out
Xmat2<- model.matrix(M1.1, data=realdat_new)
head(Xmat2)
tail(Xmat2)
Xmat2[,2]<-1
M1Xmat2<- Xmat2
Xmat2[,2]<-0
M0Xmat2<- Xmat2
M1.2 <- glm(Y ~  0 + strata(feedlot), family = binomial, data=realdat_new)
M1_M1.1 <- expit(M1Xmat2%*% fixef(M1.1) + as.vector(model.matrix(M1.2)%*% as.matrix(ranef(M1.1)$`feedlot`))) # BLUP
M0_M1.1 <- expit(M0Xmat2%*% fixef(M1.1) + as.vector(model.matrix(M1.2)%*% as.matrix(ranef(M1.1)$`feedlot`)))
realdat_new <- data.frame(realdat_new, M0_M1.1, M1_M1.1)
#Risks from Exposure IPW  model===============================================================================================
ipw.re.p0 <- with(realdat_new, mean(Y*(1-A)/(1-ps.re)))
ipw.re.p1 <- with(realdat_new, mean(Y*A/ps.re))
ipw.fe.p0 <- with(realdat_new, mean(Y*(1-A)/(1-ps.fe)))
ipw.fe.p1 <- with(realdat_new, mean(Y*A/ps.fe))
#Risks from Direct/Univariate Outcome model===============================================================================================
# model based est
realdat_new_sub1 <- realdat_new[realdat_new$A==1,]
realdat_new_sub0 <- realdat_new[realdat_new$A==0,]
direct.p0 <- with(realdat_new_sub0, mean(Y*(1-A)))
direct.p1 <- with(realdat_new_sub1, mean(Y*A))
#Risks from Model based/ Multivariate  model===============================================================================================
# mean of outcome Model based prediction
M1.1_phat1 <- with(realdat_new_sub1, mean(M1_M1.1))
M1.1_phat0 <- with(realdat_new_sub0, mean(M0_M1.1))
p0_vec <- rbind(ipw.re.p0, ipw.fe.p0,
direct.p0, M1.1_phat0)
p1_vec <- rbind(ipw.re.p1, ipw.fe.p1,
direct.p1, M1.1_phat1)
tau_vec <- p1_vec - p0_vec
OR_vec <- cbind(OR_func(p0 = p0_vec, p1 = p1_vec))
output1 <- round(cbind(p0_vec, p1_vec, tau_vec, OR_vec),digits=6)
rownames(output1) <- c("IPW random", "IPW fixed", "direct/Univariate", "Mbased/Multivariate"
)
output1 <- data.frame(output1)
colnames(output1) <- c("p0", "p1", "p1-p0", "OR")
sink("causal_effect_estimate.txt", append = TRUE)
cat("=================================================\n")
cat("having only feedlot as random/fixed effect \n")
cat("size=", nrow(realdat), "\n")
print(output1)
sink()
print(output1)
library(Hmisc)
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
# use this code to bring in the dataset
vaccine<-read.table("PINKEYE.csv",sep=",",header=T,fill=T,  na.string=" ")
# this code brings up the entire dataset- not very helpful
vaccine
# this code gives you descriptive information about the dataset
fix(vaccine)
str(vaccine)
# this code lets you see that SEX is indeed a factor
is.factor(vaccine$SEX)
# this code lets you see that SWAB_NUMBER is not a factor
is.factor(vaccine$SWAB_NUMBER)
# You can calculate the mean of SWAB_NUMBER because its not a factor
mean(vaccine$SWAB_NUMBER)
vaccine <- upData(vaccine, lowernames = TRUE, swab = factor(vaccine$SWAB_NUMBER))
str(vaccine)
mean(vaccine$swab)
# this code shows that can can't use swab as a number as its is a factor
str(vaccine)
mean(vaccine$swab)
# this code shows that can can't use swab as a number as its is a factor
vaccine <- upData(vaccine, lowernames = TRUE, swab = factor(vaccine$SWAB_NUMBER))
vaccine<-read.table("PINKEYE.csv",sep=",",header=T,fill=T,  na.string=" ")
vaccine <- upData(vaccine, lowernames = TRUE, swab = factor(vaccine$SWAB_NUMBER))
str(vaccine)
mean(vaccine$swab)
contents(vaccine)
ls()
head(vaccine$SEX, n = 15)
# one way is to always include the datsetname$variable name - this is slow
# note the head command returns the 1st n observations
search()
attach(vaccine)
search()
detach(vaccine)
with (vaccine ,(head(sex, n = 15)))
with (vaccine, (table(sex)))
with (vaccine,(table(sex, producer)))
mean(vaccine$weight)
mean(vaccine$weight, na.rm = TRUE)
range(vaccine$weight, na.rm=TRUE)
with(vaccine, quantile(weight, probs = seq(0, 1, by = 0.1), na.rm=TRUE))
summary(vaccine$weight)
# this code will get you summary data for individual variables
names(vaccine)
# this is handy if you forget the names of your variables
summary.formula(weight~vac_code, data = vaccine, methods= "responce")
summary.formula(weight~vac_code, data = vaccine, methods= "responce")
summary.formula(weight~vac_code, data = vaccine, methods= "responce", fun = function(x) {c(Median = median(x), Min = min(x), Max = max(x))})
library(Hmisc)
summary(weight~vac_code, data = vaccine, methods= "responce")
summary(weight~vac_code, data = vaccine, methods= "responce", fun = function(x) {c(Median = median(x), Min = min(x), Max = max(x))})
summary(weight~vac_code, data = vaccine, method = "cross",fun = function(x) {
c(Mean = mean(x), SD = sd(x), Median = median(x), Min = min(x),Max = max(x))})
summary(vac_code ~weight + SEX+ Producer, data = vaccine, method = "reverse", overall = TRUE)
summary(vac_code ~weight +sex+ producer, data = vaccine, method = "reverse", overall = TRUE)
print(summary.formula(vac_code ~weight + sex + producer, overall = TRUE,
method = "reverse", data = vaccine), digits = 3, npct = "both",
pctdig = 2, exclude1 = FALSE, long = TRUE, prmsd = TRUE)
print(summary(vac_code ~weight + sex + producer, overall = TRUE,
method = "reverse", data = vaccine), digits = 3, npct = "both",
pctdig = 2, exclude1 = FALSE, long = TRUE, prmsd = TRUE)
print(summary(vac_code ~weight + sex + producer, overall = TRUE,
method = "reverse", data = vaccine), digits = 3, npct = "both",
pctdig = 2, exclude1 = FALSE, long = TRUE, prmsd = TRUE)
print(summary(pinkeye ~weight + sex + producer, overall = TRUE,
method = "reverse", data = vaccine), digits = 3, npct = "both",
pctdig = 2, exclude1 = FALSE, long = TRUE, prmsd = TRUE)
print(summary(pinkeye ~vac_code +weight+ sex, overall = TRUE,
method = "reverse", data = vaccine), digits = 3, npct = "both",
pctdig = 2, exclude1 = FALSE, long = TRUE, test=TRUE, prmsd = TRUE)
table(vaccine$pinkeye, vaccine$vac_code)
vaccine$pinkeye<-factor(vaccine$pinkeye)
levels(vaccine$pinkeye)<-c("non-clinical", "clinical")
vaccine$vac_code<-factor(vaccine$vac_code)
levels(vaccine$vac_code)<-c("both","implant_only", "injectable_only", "control")
table(vaccine$pinkeye, vaccine$vac_code)
fit = (lm (weight ~ vac_code, data=vaccine))
anova(fit)
fit = (lm (weight ~ sex, data=vaccine))
anova(fit)
fit = (lm (weight ~ pinkeye, data=vaccine))
anova(fit)
fit = (lm (weight ~ producer, data=vaccine))
anova(fit)
fit = (lm (weight ~ location, data=vaccine))
anova(fit)
with (vaccine, table(sex,vac_code))
with (vaccine, chisq.test(table, sex,vac_code))
with (vaccine, table(vac_code, pinkeye))
with (vaccine, chisq.test(vac_code, pinkeye))
PROD1<-subset(vaccine,producer==1)
PROD2<-subset(vaccine,producer==2)
PROD3<-subset(vaccine,producer==3)
ls()
with (PROD1, table(vac_code, pinkeye))
with (PROD1, chisq.test(vac_code, pinkeye))
with (PROD2, table(vac_code, pinkeye))
with (PROD2, chisq.test(vac_code, pinkeye))
with (PROD3, table(vac_code, pinkeye))
with (PROD3, chisq.test(vac_code, pinkeye))
fit<-with (vaccine, lm(weight~sex + vac_code))
anova(fit)
fit<-(lm (weight ~ sex + pinkeye + producer + location, data=vaccine))
anova(fit)
summary(fit)
vaccine <- upData(vaccine, lowernames = TRUE, treated = factor(vaccine$pinkeye), owner=factor(vaccine$producer))
fit<-(lm (weight ~ sex + treated + owner, data=vaccine))
anova(fit)
summary(fit)
fit<-(lm (weight ~ sex + pinkeye + producer, data=vaccine))
anova(fit)
summary(fit)
summary(vaccine$producer)
summary(vaccine$owner)
print(summary(weight ~ + sex + pinkeye + producer, overall = TRUE,
method = "reverse", data = vaccine), digits = 3, npct = "both",
pctdig = 2, exclude1 = FALSE, long = TRUE, prmsd = TRUE)
summary(weight ~ + sex + pinkeye + producer, overall = TRUE,
method = "reverse", data = vaccine)
summary(weight ~ sex + pinkeye + producer, overall = TRUE,
method = "reverse", data = vaccine)
summary(pinkeye ~ sex + weight + producer, overall = TRUE,
method = "reverse", data = vaccine)
summary(weight~sex + pinkeye + producer, data = vaccine, method = "cross",fun = function(x) {
c(Mean = mean(x), SD = sd(x), Median = median(x), Min = min(x),Max = max(x))})
summary(weight~sex + pinkeye + producer, data = vaccine, method = "cross",fun = function(x) {
c(Mean = mean(x)})
summary(weight~sex + pinkeye + producer, data = vaccine, method = "cross",fun = function(x) {
c(Mean = mean(x))})
fit<-(lm (weight ~ sex + treated + owner, data=vaccine))
summary(vaccine$owner)
anova(fit)
summary(fit)
summary(weight~sex + treated + owner, data = vaccine, method = "cross",fun = function(x) {
c(Mean = mean(x))})
fit<-(lm (weight ~ sex , data=vaccine))
summary(vaccine$owner)
anova(fit)
summary(fit)
summary(weight~sex, data = vaccine, method = "cross",fun = function(x) {
c(Mean = mean(x))})
fit<-(lm (weight ~ sex +treated, data=vaccine))
summary(vaccine$owner)
anova(fit)
summary(fit)
summary(weight~sex +treated, data = vaccine, method = "cross",fun = function(x) {
c(Mean = mean(x))})
str(vaccine)
vaccine <- upData(vaccine, lowernames = TRUE, treated = factor(vaccine$pinkeye), owner=factor(vaccine$producer), sex1 = factor(vaccine$sex))
fit<-(lm (weight ~ sex1 + treated, data=vaccine))
summary(vaccine$owner)
anova(fit)
summary(fit
summary(fit)
summary(fit)
summary(weight~sex1 + treated, data = vaccine, method = "cross",fun = function(x) {
c(Mean = mean(x))})
summary(weight~sex1 + treated, data = vaccine, rm.na=TRUE, method = "cross",fun = function(x) {
c(Mean = mean(x))})
fit<-(lm (weight ~ sex1 + treated, data=vaccine), rm.na=T)
View(vaccine)
plot (fitted(fit), residual(fit), xlab=Fitted", ylab="residuals"))
fit<-(lm (weight ~ sex + treated + owner, data=vaccine))
summary(vaccine$owner)
anova(fit)
summary(fit)
plot (fitted(fit), residual(fit), xlab=Fitted", ylab="residuals"))
plot(fitted(fit), residual(fit), xlab=Fitted", ylab="residuals"))
plot(fitted(fit), residual(fit), xlab="Fitted", ylab="residuals"))
plot(fitted(fit), residual(fit), (xlab="Fitted", ylab="residuals"))
plot(fitted(fit), residual(fit), xlab="Fitted", ylab="residuals")
plot(fitted(fit))
plot(fitted(fit),residual(fit))
plot(fitted(fit),residuals(fit))
plot(fitted(fit),residuals(fit), xlab="Fitted", ylab="residuals")
heifers<-subset(vaccine,sex==h)
bulls<-subset(vaccine,producer==2)
steers<-subset(vaccine,producer==3)
fit<-(lm(weight~sex, data=vaccine))
summary(fit)
model.matrix(fit)
vaccine$sex<-relevel(vaccine$sex, ref="h")
vaccine$pinkeye<-factor(vaccine$pinkeye)
levels(vaccine$pinkeye)<-c("non-clinical", "clinical")
fit<-(lm(weight~pinkeye, data=vaccine))
summary(fit)
table(vaccine$pinkeye, vaccine$vac_code)
vaccine$vac_code<-factor(vaccine$vac_code)
levels(vaccine$vac_code)<-c("both","implant_only", "injectable_only", "control")
help(package=epitools)
RRtab<-epitable(vaccine$vac_code, vaccine$pinkeye)
epitab(RRtab, method="riskratio", verbose = TRUE)
install.packages("epitools")
library(epitools)
epitab(RRtab, method="riskratio", verbose = TRUE)
RRtab<-epitable(vaccine$vac_code, vaccine$pinkeye)
epitab(RRtab, method="riskratio", verbose = TRUE)
both<-subset(vaccine,VAC_CODE=="both" && "control" )
both<-subset(vaccine,vac_code=="both" && "control" )
both<-subset(vaccine,vac_code==”both” && “”control” )
View(vaccine)
both<-subset(vaccine, vac_code=="both" && "control" )
dat.logistic= glm(pinkeye~vac_code,data=vaccine,family=binomial(logit))
summary(dat.logistic)
epitab(RRtab, method="oddsratio", verbose = TRUE)
epitab(RRtab, method="oddsratio",  conf.level = 0.95, verbose = TRUE)
epitab(RRtab, method="oddsratio",  conf.level = 0.95, verbose = F)
dat.logistic= glm(pinkeye~vac_code,data=vaccine,family=binomial(logit))
summary(dat.logistic)
exp(0.21822)
